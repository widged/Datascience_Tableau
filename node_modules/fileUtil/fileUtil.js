var fs = require('fs');
var path = require('path');
var rimraf = require('rimraf');
var pathSeparatorRe = /[\/\\]/g;

exports.write = function(f, content) {
   exports.mkdir(path.dirname(f));
   fs.writeFileSync(f, content);
};

exports.read = function(f) {
   return fs.readFileSync(f).toString();
};


exports.fileEach = function(dir,fileFn, failFn, dirDone) {
  var fileQty;
  if(dir.slice(-1) !== "/") { dir += "/"; }
  fs.readdir(dir, function(err, list) {
    if(err) {
      if(failFn !== null) { failFn(err); }
    } else {
      // for every file in the list
      fileQty = list.length;
      list.forEach(function(file,index) {
        var f = dir + file;
        fileFn(f, whenDone, index);
      });
    }
  });
  function whenDone(index) {
    fileQty--;
    if(!fileQty) { dirDone(dir); }
  }
};

exports.checkFile = function(f, whenFile, whenDirectory, whenInvalid) {
   var fn;
   fs.stat(f, function(err, stat) {
      if(!stat) {
        console.log('invalid', err);
        fn = whenInvalid;
      } else if (stat.isDirectory()) {
        fn = whenDirectory;
      } else if(stat.isFile()) {
        fn = whenFile;
      }
      if(fn) { fn(f); }
   });
};

// True if the file path exists.
exports.fileExists = function() {
  var filepath = path.join.apply(path, arguments);
  return fs.existsSync(filepath);
};

// Like mkdir -p. Create a directory and any intermediary directories.
exports.mkdir = function(dirpath, mode) {
  // Set directory mode in a strict-mode-friendly way.
  if (mode === null) {
    mode = parseInt('0777', 8) & (~process.umask());
  }
  dirpath.split(pathSeparatorRe).reduce(function(parts, part) {
    parts += part + '/';
    var subpath = path.resolve(parts);
    if (!exports.fileExists(subpath)) {
      try {
        fs.mkdirSync(subpath, mode);
      } catch(e) {
        throw new Error('Unable to create directory "' + subpath + '" (Error code: ' + e.code + ').', e);
      }
    }
    return parts;
  }, '');
};



exports.clean = function(f) {
   rimraf.sync(f);
}