{
  "author": {
    "name": "Markus von der Wehd",
    "email": "mvdw@mwin.de"
  },
  "name": "line-by-line",
  "description": "A NodeJS module that helps you reading large text files, line by line, without buffering the files into memory.",
  "version": "0.1.1",
  "keywords": [
    "line",
    "file",
    "reader",
    "fs"
  ],
  "homepage": "https://github.com/RustyMarvin/line-by-line",
  "repository": {
    "type": "git",
    "url": "git@github.com:RustyMarvin/line-by-line.git"
  },
  "main": "line-by-line.js",
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "latest"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.6.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/RustyMarvin/line-by-line/master/LICENSE.txt"
    }
  ],
  "readme": "\n# Line By Line\n\nis a [NodeJS](http://nodejs.org/) module\nthat helps you reading large text files, line by line,\nwithout buffering the files into memory.\n\nInstallation:\n\n    npm install line-by-line\n\n\n## Usage:\n\nSynchronous processing of lines:\n\n\tvar LineByLineReader = require('line-by-line'),\n\tvar lr = new LineByLineReader('big_file.txt');\n\n\tlr.on('error', function (err) {\n\t\t// 'err' contains error object\n\t});\n\n\tlr.on('line', function (line) {\n\t\t// 'line' contains the current line without the trailing newline character.\n\t});\n\n\tlr.on('end', function () {\n\t\t// All lines are read, file is closed now.\n\t});\n\nAsynchronous processing of lines:\n\n\tvar LineByLineReader = require('line-by-line'),\n\tvar lr = new LineByLineReader('big_file.txt');\n\n\tlr.on('error', function (err) {\n\t\t// 'err' contains error object\n\t});\n\n\tlr.on('line', function (line) {\n\t\t// pause emitting of lines...\n\t\tlr.pause();\n\n\t\t// ...do your asynchronous line processing..\n\t\tsetTimeout(function () {\n\n\t\t\t// ...and continue emitting lines.\n\t\t\tlr.resume();\n\t\t}, 100);\n\t});\n\n\tlr.on('end', function () {\n\t\t// All lines are read, file is closed now.\n\t});\n\n\n## API:\n\n**Class: LineReader(path [, options])**\n\n`path` specifies the file to read\n\n`options` is an object with the following defaults:\n```\n{ encoding: 'utf8',\n  skipEmptyLines: false }\n```\n\n`encoding` can be `'utf8'`, `'ascii'`, or `'base64'`.\n\nIf `skipEmptyLines` set to `true`, empty lines don't trigger a 'line' event.\n\n\n**Event: 'line'**\n\n    function (line) { }\n\nEmitted on every line read.\n\n`line` contains the line without the line ending character.\n\n\n**Event: 'error'**\n\n    function (error) { }\n\nEmitted if an error occurred.\n\n`error` contains the error object.\n\n\n**Event: 'end'**\n\n    function () { }\n\nEmitted if all lines are read.\n\n\n**pause()**\n\nCall this method to stop emitting 'line' events.\n\n\n**resume()**\n\nAfter calling this method, 'line' events gets emitted again.\n\n\n**close()**\n\nStops emitting 'line' events, closes the file and emits the 'end' event.\n\n\n## License:\n\nThe MIT License (MIT)\n\nCopyright ï¿½ 2012 Markus von der Wehd\n",
  "readmeFilename": "README.md",
  "_id": "line-by-line@0.1.1",
  "_from": "line-by-line"
}
